/*Copyright (c) 2019-2020 voyy.com All Rights Reserved.
 This software is the confidential and proprietary information of voyy.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with voyy.com*/
package com.rapido.deodongskokvdk.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.rapido.deodongskokvdk.service.DeodongskokvdkQueryExecutorService;
import com.rapido.deodongskokvdk.models.query.*;

@RestController(value = "Deodongskokvdk.QueryExecutionController")
@RequestMapping("/deodongskokvdk/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private DeodongskokvdkQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/Brands", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Items by Brand")
    public Page<BrandsResponse> executeBrands(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Brands");
        Page<BrandsResponse> _result = queryService.executeBrands(pageable);
        LOGGER.debug("got the result for named query: Brands, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Brands")
    @RequestMapping(value = "/queries/Brands/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBrands(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Brands");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Brands";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportBrands( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/RapidoAccount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Just the Rapido Account")
    public Page<RapidoAccountResponse> executeRapidoAccount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: RapidoAccount");
        Page<RapidoAccountResponse> _result = queryService.executeRapidoAccount(pageable);
        LOGGER.debug("got the result for named query: RapidoAccount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query RapidoAccount")
    @RequestMapping(value = "/queries/RapidoAccount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRapidoAccount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: RapidoAccount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "RapidoAccount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportRapidoAccount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Rapido", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Rapido")
    public Page<RapidoResponse> executeRapido(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Rapido");
        Page<RapidoResponse> _result = queryService.executeRapido(pageable);
        LOGGER.debug("got the result for named query: Rapido, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Rapido")
    @RequestMapping(value = "/queries/Rapido/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRapido(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Rapido");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Rapido";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportRapido( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}