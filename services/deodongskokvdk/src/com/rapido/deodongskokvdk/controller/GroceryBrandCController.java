/*Copyright (c) 2019-2020 voyy.com All Rights Reserved.
 This software is the confidential and proprietary information of voyy.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with voyy.com*/
package com.rapido.deodongskokvdk.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.rapido.deodongskokvdk.GroceryBrandC;
import com.rapido.deodongskokvdk.service.GroceryBrandCService;


/**
 * Controller object for domain model class GroceryBrandC.
 * @see GroceryBrandC
 */
@RestController("deodongskokvdk.GroceryBrandCController")
@Api(value = "GroceryBrandCController", description = "Exposes APIs to work with GroceryBrandC resource.")
@RequestMapping("/deodongskokvdk/GroceryBrandC")
public class GroceryBrandCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GroceryBrandCController.class);

    @Autowired
	@Qualifier("deodongskokvdk.GroceryBrandCService")
	private GroceryBrandCService groceryBrandCService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GroceryBrandC instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroceryBrandC createGroceryBrandC(@RequestBody GroceryBrandC groceryBrandC) {
		LOGGER.debug("Create GroceryBrandC with information: {}" , groceryBrandC);

		groceryBrandC = groceryBrandCService.create(groceryBrandC);
		LOGGER.debug("Created GroceryBrandC with information: {}" , groceryBrandC);

	    return groceryBrandC;
	}

    @ApiOperation(value = "Returns the GroceryBrandC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroceryBrandC getGroceryBrandC(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GroceryBrandC with id: {}" , id);

        GroceryBrandC foundGroceryBrandC = groceryBrandCService.getById(id);
        LOGGER.debug("GroceryBrandC details with id: {}" , foundGroceryBrandC);

        return foundGroceryBrandC;
    }

    @ApiOperation(value = "Updates the GroceryBrandC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroceryBrandC editGroceryBrandC(@PathVariable("id") Integer id, @RequestBody GroceryBrandC groceryBrandC) {
        LOGGER.debug("Editing GroceryBrandC with id: {}" , groceryBrandC.getId());

        groceryBrandC.setId(id);
        groceryBrandC = groceryBrandCService.update(groceryBrandC);
        LOGGER.debug("GroceryBrandC details with id: {}" , groceryBrandC);

        return groceryBrandC;
    }

    @ApiOperation(value = "Deletes the GroceryBrandC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGroceryBrandC(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GroceryBrandC with id: {}" , id);

        GroceryBrandC deletedGroceryBrandC = groceryBrandCService.delete(id);

        return deletedGroceryBrandC != null;
    }

    /**
     * @deprecated Use {@link #findGroceryBrandCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GroceryBrandC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroceryBrandC> searchGroceryBrandCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GroceryBrandCs list by query filter:{}", (Object) queryFilters);
        return groceryBrandCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroceryBrandC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroceryBrandC> findGroceryBrandCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroceryBrandCs list by filter:", query);
        return groceryBrandCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroceryBrandC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroceryBrandC> filterGroceryBrandCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroceryBrandCs list by filter", query);
        return groceryBrandCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGroceryBrandCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return groceryBrandCService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGroceryBrandCsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GroceryBrandC.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> groceryBrandCService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GroceryBrandC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countGroceryBrandCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GroceryBrandCs");
		return groceryBrandCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getGroceryBrandCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return groceryBrandCService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GroceryBrandCService instance
	 */
	protected void setGroceryBrandCService(GroceryBrandCService service) {
		this.groceryBrandCService = service;
	}

}