/*Copyright (c) 2019-2020 voyy.com All Rights Reserved.
 This software is the confidential and proprietary information of voyy.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with voyy.com*/
package com.rapido.deodongskokvdk.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.rapido.deodongskokvdk.GroceryItemC;
import com.rapido.deodongskokvdk.service.GroceryItemCService;


/**
 * Controller object for domain model class GroceryItemC.
 * @see GroceryItemC
 */
@RestController("deodongskokvdk.GroceryItemCController")
@Api(value = "GroceryItemCController", description = "Exposes APIs to work with GroceryItemC resource.")
@RequestMapping("/deodongskokvdk/GroceryItemC")
public class GroceryItemCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GroceryItemCController.class);

    @Autowired
	@Qualifier("deodongskokvdk.GroceryItemCService")
	private GroceryItemCService groceryItemCService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GroceryItemC instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroceryItemC createGroceryItemC(@RequestBody GroceryItemC groceryItemC) {
		LOGGER.debug("Create GroceryItemC with information: {}" , groceryItemC);

		groceryItemC = groceryItemCService.create(groceryItemC);
		LOGGER.debug("Created GroceryItemC with information: {}" , groceryItemC);

	    return groceryItemC;
	}

    @ApiOperation(value = "Returns the GroceryItemC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroceryItemC getGroceryItemC(@PathVariable("id") Long id) {
        LOGGER.debug("Getting GroceryItemC with id: {}" , id);

        GroceryItemC foundGroceryItemC = groceryItemCService.getById(id);
        LOGGER.debug("GroceryItemC details with id: {}" , foundGroceryItemC);

        return foundGroceryItemC;
    }

    @ApiOperation(value = "Updates the GroceryItemC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroceryItemC editGroceryItemC(@PathVariable("id") Long id, @RequestBody GroceryItemC groceryItemC) {
        LOGGER.debug("Editing GroceryItemC with id: {}" , groceryItemC.getPkid());

        groceryItemC.setPkid(id);
        groceryItemC = groceryItemCService.update(groceryItemC);
        LOGGER.debug("GroceryItemC details with id: {}" , groceryItemC);

        return groceryItemC;
    }

    @ApiOperation(value = "Deletes the GroceryItemC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGroceryItemC(@PathVariable("id") Long id) {
        LOGGER.debug("Deleting GroceryItemC with id: {}" , id);

        GroceryItemC deletedGroceryItemC = groceryItemCService.delete(id);

        return deletedGroceryItemC != null;
    }

    /**
     * @deprecated Use {@link #findGroceryItemCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GroceryItemC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroceryItemC> searchGroceryItemCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GroceryItemCs list by query filter:{}", (Object) queryFilters);
        return groceryItemCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroceryItemC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroceryItemC> findGroceryItemCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroceryItemCs list by filter:", query);
        return groceryItemCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroceryItemC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroceryItemC> filterGroceryItemCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroceryItemCs list by filter", query);
        return groceryItemCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGroceryItemCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return groceryItemCService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportGroceryItemCsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GroceryItemC.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> groceryItemCService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GroceryItemC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countGroceryItemCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GroceryItemCs");
		return groceryItemCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getGroceryItemCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return groceryItemCService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GroceryItemCService instance
	 */
	protected void setGroceryItemCService(GroceryItemCService service) {
		this.groceryItemCService = service;
	}

}