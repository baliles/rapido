/*Copyright (c) 2019-2020 voyy.com All Rights Reserved.
 This software is the confidential and proprietary information of voyy.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with voyy.com*/
package com.rapido.deodongskokvdk.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.rapido.deodongskokvdk.GroceryBrandC;


/**
 * ServiceImpl object for domain model class GroceryBrandC.
 *
 * @see GroceryBrandC
 */
@Service("deodongskokvdk.GroceryBrandCService")
@Validated
public class GroceryBrandCServiceImpl implements GroceryBrandCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GroceryBrandCServiceImpl.class);


    @Autowired
    @Qualifier("deodongskokvdk.GroceryBrandCDao")
    private WMGenericDao<GroceryBrandC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<GroceryBrandC, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryBrandC create(GroceryBrandC groceryBrandC) {
        LOGGER.debug("Creating a new GroceryBrandC with information: {}", groceryBrandC);

        GroceryBrandC groceryBrandCCreated = this.wmGenericDao.create(groceryBrandC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(groceryBrandCCreated);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryBrandC getById(Integer grocerybrandcId) {
        LOGGER.debug("Finding GroceryBrandC by id: {}", grocerybrandcId);
        return this.wmGenericDao.findById(grocerybrandcId);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryBrandC findById(Integer grocerybrandcId) {
        LOGGER.debug("Finding GroceryBrandC by id: {}", grocerybrandcId);
        try {
            return this.wmGenericDao.findById(grocerybrandcId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GroceryBrandC found with id: {}", grocerybrandcId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public List<GroceryBrandC> findByMultipleIds(List<Integer> grocerybrandcIds, boolean orderedReturn) {
        LOGGER.debug("Finding GroceryBrandCs by ids: {}", grocerybrandcIds);

        return this.wmGenericDao.findByMultipleIds(grocerybrandcIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryBrandC update(GroceryBrandC groceryBrandC) {
        LOGGER.debug("Updating GroceryBrandC with information: {}", groceryBrandC);

        this.wmGenericDao.update(groceryBrandC);
        this.wmGenericDao.refresh(groceryBrandC);

        return groceryBrandC;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryBrandC delete(Integer grocerybrandcId) {
        LOGGER.debug("Deleting GroceryBrandC with id: {}", grocerybrandcId);
        GroceryBrandC deleted = this.wmGenericDao.findById(grocerybrandcId);
        if (deleted == null) {
            LOGGER.debug("No GroceryBrandC found with id: {}", grocerybrandcId);
            throw new EntityNotFoundException(String.valueOf(grocerybrandcId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public void delete(GroceryBrandC groceryBrandC) {
        LOGGER.debug("Deleting GroceryBrandC with {}", groceryBrandC);
        this.wmGenericDao.delete(groceryBrandC);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<GroceryBrandC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GroceryBrandCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<GroceryBrandC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GroceryBrandCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service deodongskokvdk for table GroceryBrandC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service deodongskokvdk for table GroceryBrandC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}