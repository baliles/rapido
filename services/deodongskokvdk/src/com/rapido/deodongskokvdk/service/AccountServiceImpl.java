/*Copyright (c) 2019-2020 voyy.com All Rights Reserved.
 This software is the confidential and proprietary information of voyy.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with voyy.com*/
package com.rapido.deodongskokvdk.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.rapido.deodongskokvdk.Account;


/**
 * ServiceImpl object for domain model class Account.
 *
 * @see Account
 */
@Service("deodongskokvdk.AccountService")
@Validated
public class AccountServiceImpl implements AccountService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);


    @Autowired
    @Qualifier("deodongskokvdk.AccountDao")
    private WMGenericDao<Account, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Account, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public Account create(Account account) {
        LOGGER.debug("Creating a new Account with information: {}", account);

        Account accountCreated = this.wmGenericDao.create(account);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(accountCreated);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Account getById(Integer accountId) {
        LOGGER.debug("Finding Account by id: {}", accountId);
        return this.wmGenericDao.findById(accountId);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Account findById(Integer accountId) {
        LOGGER.debug("Finding Account by id: {}", accountId);
        try {
            return this.wmGenericDao.findById(accountId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Account found with id: {}", accountId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public List<Account> findByMultipleIds(List<Integer> accountIds, boolean orderedReturn) {
        LOGGER.debug("Finding Accounts by ids: {}", accountIds);

        return this.wmGenericDao.findByMultipleIds(accountIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "deodongskokvdkTransactionManager")
    @Override
    public Account update(Account account) {
        LOGGER.debug("Updating Account with information: {}", account);

        this.wmGenericDao.update(account);
        this.wmGenericDao.refresh(account);

        return account;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public Account delete(Integer accountId) {
        LOGGER.debug("Deleting Account with id: {}", accountId);
        Account deleted = this.wmGenericDao.findById(accountId);
        if (deleted == null) {
            LOGGER.debug("No Account found with id: {}", accountId);
            throw new EntityNotFoundException(String.valueOf(accountId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public void delete(Account account) {
        LOGGER.debug("Deleting Account with {}", account);
        this.wmGenericDao.delete(account);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<Account> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Accounts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<Account> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Accounts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service deodongskokvdk for table Account to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service deodongskokvdk for table Account to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}