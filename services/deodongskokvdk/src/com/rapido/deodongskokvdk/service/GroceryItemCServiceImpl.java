/*Copyright (c) 2019-2020 voyy.com All Rights Reserved.
 This software is the confidential and proprietary information of voyy.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with voyy.com*/
package com.rapido.deodongskokvdk.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.rapido.deodongskokvdk.GroceryItemC;


/**
 * ServiceImpl object for domain model class GroceryItemC.
 *
 * @see GroceryItemC
 */
@Service("deodongskokvdk.GroceryItemCService")
@Validated
public class GroceryItemCServiceImpl implements GroceryItemCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GroceryItemCServiceImpl.class);


    @Autowired
    @Qualifier("deodongskokvdk.GroceryItemCDao")
    private WMGenericDao<GroceryItemC, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<GroceryItemC, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryItemC create(GroceryItemC groceryItemC) {
        LOGGER.debug("Creating a new GroceryItemC with information: {}", groceryItemC);

        GroceryItemC groceryItemCCreated = this.wmGenericDao.create(groceryItemC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(groceryItemCCreated);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryItemC getById(Long groceryitemcId) {
        LOGGER.debug("Finding GroceryItemC by id: {}", groceryitemcId);
        return this.wmGenericDao.findById(groceryitemcId);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryItemC findById(Long groceryitemcId) {
        LOGGER.debug("Finding GroceryItemC by id: {}", groceryitemcId);
        try {
            return this.wmGenericDao.findById(groceryitemcId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GroceryItemC found with id: {}", groceryitemcId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public List<GroceryItemC> findByMultipleIds(List<Long> groceryitemcIds, boolean orderedReturn) {
        LOGGER.debug("Finding GroceryItemCs by ids: {}", groceryitemcIds);

        return this.wmGenericDao.findByMultipleIds(groceryitemcIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryItemC update(GroceryItemC groceryItemC) {
        LOGGER.debug("Updating GroceryItemC with information: {}", groceryItemC);

        this.wmGenericDao.update(groceryItemC);
        this.wmGenericDao.refresh(groceryItemC);

        return groceryItemC;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public GroceryItemC delete(Long groceryitemcId) {
        LOGGER.debug("Deleting GroceryItemC with id: {}", groceryitemcId);
        GroceryItemC deleted = this.wmGenericDao.findById(groceryitemcId);
        if (deleted == null) {
            LOGGER.debug("No GroceryItemC found with id: {}", groceryitemcId);
            throw new EntityNotFoundException(String.valueOf(groceryitemcId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "deodongskokvdkTransactionManager")
    @Override
    public void delete(GroceryItemC groceryItemC) {
        LOGGER.debug("Deleting GroceryItemC with {}", groceryItemC);
        this.wmGenericDao.delete(groceryItemC);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<GroceryItemC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GroceryItemCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<GroceryItemC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GroceryItemCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service deodongskokvdk for table GroceryItemC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service deodongskokvdk for table GroceryItemC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "deodongskokvdkTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}