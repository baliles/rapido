/*Copyright (c) 2019-2020 voyy.com All Rights Reserved.
 This software is the confidential and proprietary information of voyy.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with voyy.com*/
package com.rapido.deodongskokvdk.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.rapido.deodongskokvdk.GroceryItemC;

/**
 * Service object for domain model class {@link GroceryItemC}.
 */
public interface GroceryItemCService {

    /**
     * Creates a new GroceryItemC. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GroceryItemC if any.
     *
     * @param groceryItemC Details of the GroceryItemC to be created; value cannot be null.
     * @return The newly created GroceryItemC.
     */
    GroceryItemC create(@Valid GroceryItemC groceryItemC);


	/**
     * Returns GroceryItemC by given id if exists.
     *
     * @param groceryitemcId The id of the GroceryItemC to get; value cannot be null.
     * @return GroceryItemC associated with the given groceryitemcId.
	 * @throws EntityNotFoundException If no GroceryItemC is found.
     */
    GroceryItemC getById(Long groceryitemcId);

    /**
     * Find and return the GroceryItemC by given id if exists, returns null otherwise.
     *
     * @param groceryitemcId The id of the GroceryItemC to get; value cannot be null.
     * @return GroceryItemC associated with the given groceryitemcId.
     */
    GroceryItemC findById(Long groceryitemcId);

	/**
     * Find and return the list of GroceryItemCs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param groceryitemcIds The id's of the GroceryItemC to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return GroceryItemCs associated with the given groceryitemcIds.
     */
    List<GroceryItemC> findByMultipleIds(List<Long> groceryitemcIds, boolean orderedReturn);


    /**
     * Updates the details of an existing GroceryItemC. It replaces all fields of the existing GroceryItemC with the given groceryItemC.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GroceryItemC if any.
     *
     * @param groceryItemC The details of the GroceryItemC to be updated; value cannot be null.
     * @return The updated GroceryItemC.
     * @throws EntityNotFoundException if no GroceryItemC is found with given input.
     */
    GroceryItemC update(@Valid GroceryItemC groceryItemC);

    /**
     * Deletes an existing GroceryItemC with the given id.
     *
     * @param groceryitemcId The id of the GroceryItemC to be deleted; value cannot be null.
     * @return The deleted GroceryItemC.
     * @throws EntityNotFoundException if no GroceryItemC found with the given id.
     */
    GroceryItemC delete(Long groceryitemcId);

    /**
     * Deletes an existing GroceryItemC with the given object.
     *
     * @param groceryItemC The instance of the GroceryItemC to be deleted; value cannot be null.
     */
    void delete(GroceryItemC groceryItemC);

    /**
     * Find all GroceryItemCs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GroceryItemCs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<GroceryItemC> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all GroceryItemCs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GroceryItemCs.
     *
     * @see Pageable
     * @see Page
     */
    Page<GroceryItemC> findAll(String query, Pageable pageable);

    /**
     * Exports all GroceryItemCs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all GroceryItemCs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the GroceryItemCs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the GroceryItemC.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}